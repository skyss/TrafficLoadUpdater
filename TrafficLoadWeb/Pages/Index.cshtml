@page "{status:TrafficLight=Yellow}/{filterstatus:TrafficLight=Yellow}/{date:DateTime?}/{line?}"
@model IndexModel

@{
    var culture = new System.Globalization.CultureInfo("nb-NO");
    ViewData["Title"] = "Home page";

    var diff = (int)culture.DateTimeFormat.FirstDayOfWeek - (int)Model.Date.DayOfWeek;
    if ((int)Model.Date.DayOfWeek == 0)
        diff = -6;

    DateTime startOfWeek = Model.Date.AddDays(diff);

    List<DateTime> CurrentWeek = Enumerable
        .Range(0, 7)
        .Select(i => startOfWeek
           .AddDays(i)
        ).ToList<DateTime>();

    var parms = new Dictionary<string, string>
    {
                { "Status", Model.Status.ToString() },
                { "FilterStatus", Model.FilterStatus.ToString() },
                { "Line", Model.Line  },
                { "Date", Model.Date.ToString("yyyy-MM-dd") }
            };

    var status = Model.Status.ToString().ToLower();

    var statuses = new Tuple<string, string, Dictionary<string, string>>[]
        {
            Tuple.Create("text-danger", (status.Equals("red")?"Gjeldande " : "Endre til ") + ": Raud", new Dictionary<string, string>(parms)),
            Tuple.Create("text-warning", (status.Equals("yellow")?"Gjeldande " : "Endre til ") + ": Gul", new Dictionary<string, string>(parms)),
            Tuple.Create("text-success", (status.Equals("green")?"Gjeldande " : "Endre til ") + ": Grøn", new Dictionary<string, string>(parms))
                };

    statuses[0].Item3["Status"] = "Red";
    statuses[1].Item3["Status"] = "Yellow";
    statuses[2].Item3["Status"] = "Green";

    var currentStatus = statuses[(status.Equals("red") ? 0 : status.Equals("yellow") ? 1 : 2)];


    <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white mb-3">
        <a class="navbar-brand skyss-logo" style="text-indent:-1200px" asp-area="" asp-page="/Index">Skyss COVID-19</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse navbar-expand-lg d-sm-inline-flex flex-sm-row-reverse">
            <ul class="navbar-nav mr-auto flex-grow-1 justify-content-end">
                <li class="nav-item">
                    <div class="btn-group my-2 my-lg-0">
                        <a class="dropdown-toggle @currentStatus.Item1" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">@currentStatus.Item2.Replace("Gjeldande", "Nasjonal status")</a>
                        <div class="dropdown-menu dropdown-menu-right">
                            @foreach (var itm in statuses)
                            {
                            <a class="dropdown-item @itm.Item1" asp-all-route-data="@itm.Item3" asp-page="@ViewContext.RouteData.Values["page"]">@itm.Item2</a>
                            }
                        </div>
                    </div>
                </li>
            </ul>
            <ul class="nav nav-tabs mr-auto flex-grow-1">
                <li class="nav-item">
                    <a class="nav-link @(Model.FilterStatus.ToString() == "Green"?"active":"")" asp-route-filterstatus="Green" asp-page="Index">Alle avgangar</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(Model.FilterStatus.ToString() == "Yellow"?"active":"")" asp-route-filterstatus="Yellow" asp-page="Index">Avgangar med avvik</a>
                </li>
                @*<li class="nav-item">
                    <form method="get" class="form-inline" id="filters">
                        <input type="date" class="form-inline" asp-for="Date" id="activeDate" style="margin-left: 10px; margin-top: 5px;" />
                    </form>
                </li>*@
            </ul>
        </div>
    </nav>
    <div class="row">
        <div class="col">
            <form class="form-inline" method="post" id="stopSelect">
                <div class="input-group mb-2 mr-sm-2">
                    <input type="hidden" name="TimeSpan" id="timespan" value="@Model.TimeSpan">
                    <div id="time-range">
                        <p>
                            Tidspunkt: <span class="slider-time">@Model.TimeSpanFrom.ToShortTimeString()</span> - <span class="slider-time2">@Model.TimeSpanTo.ToShortTimeString()</span>
                        </p>
                        <div class="sliders_step1">
                            <div id="slider-range" data-values="@Model.TimeSpan"></div>
                        </div>
                    </div>
                </div>
                <div class="input-group mb-2 mr-sm-2">
                    <label for="stopName" class="col-form-label">Haldeplass:</label>
                    <select class="form-control basicAutoComplete" name="stopName"
                            placeholder="type to search..."
                            data-default-value="@Model.StopName"
                            data-default-text="@Model.StopName_text"
                            data-url="@Url.Page("index", "search")" autocomplete="off"></select>
                </div>
            </form>
        </div>
    </div>


    @if (Model.TurModel != null)
    {
    <div class="row">
        <div class="col">

            <div class="table-responsive-sm">
                <table class="table table-striped table-sm table-hover">
                    <thead>
                        <tr>
                            <th scope="col" style="background: #eee; position: sticky; top: 0;">Linje</th>
                            <th scope="col" style="background: #eee; position: sticky; top: 0;">Retning</th>
                            <th scope="col" style="background: #eee; position: sticky; top: 0;">Avgang</th>
                            <th scope="col" style="background: #eee; position: sticky; top: 0;">@Model.Date.ToShortDateString()</th>
                            <th scope="col" style="background: #eee; position: sticky; top: 0;">@Model.Date.AddDays(-1).ToShortDateString()</th>
                            <th scope="col" style="background: #eee; position: sticky; top: 0;">@Model.Date.AddDays(-2).ToShortDateString()</th>
                            <th scope="col" style="background: #eee; position: sticky; top: 0;">@Model.Date.AddDays(-3).ToShortDateString()</th>
                            <th scope="col" style="background: #eee; position: sticky; top: 0;">@Model.Date.AddDays(-4).ToShortDateString()</th>
                            <th scope="col" style="background: #eee; position: sticky; top: 0;">@Model.Date.AddDays(-5).ToShortDateString()</th>
                            <th scope="col" style="background: #eee; position: sticky; top: 0;">@Model.Date.AddDays(-6).ToShortDateString()</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.TurModel.Results)
                    {
                        var days = new List<TrafficLoadWeb.Models.Tur>();
                        days.Add(item);
                        days.AddRange(item.History.Cast<TrafficLoadWeb.Models.Tur>());

                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.LineName)</td>
                            <td>@Html.DisplayFor(modelItem => item.TilStopp)</td>
                            <td>@Html.Raw(item.AvgangsTid.ToShortTimeString())</td>

                            @for (int i = 0; i > -7; i--)
                            {
                                var itm = days.Where(h => h.AvgangsTid.Date == item.AvgangsTid.Date.AddDays(i)).FirstOrDefault();
                                if (itm != null)
                                {
                            <td>
                                @if (itm.IsRed(Model.Status))
                                        {
                                <a href="#" class="badge badge-pill badge-danger" style="width:35px" data-toggle="tooltip" data-placement="bottom" title="@itm.FraStopp(Model.Status)">+@Html.Raw(Convert.ToInt32(itm.Ombord) - itm.StatusKapasitet(Model.Status))</a>
                                <span style="float:right;padding-top:3px;padding-left:5px;text-indent:-80px"><span style="display:block;font-size:65%;text-align:center;">@Html.Raw((itm.TilTid(Model.Status) - itm.FraTid(Model.Status)).Value.Minutes)</span><span style="display:block;font-size:45%;text-align:center;">min</span></span>
                                        }
                                @if (itm.IsYellow(Model.Status))
                                        {
                                <a href="#" class="badge badge-pill badge-warning" style="width:35px" data-toggle="tooltip" data-placement="bottom" title="@itm.FraStopp(Model.Status)">+@Html.Raw(Convert.ToInt32(itm.Ombord) - itm.StatusKapasitet(Model.Status))</a>
                                        }
                                @if (itm.IsGreen(Model.Status) && itm.StatusKapasitet(Model.Status) - Convert.ToInt32(itm.Ombord) <= 5)
                                        {
                                <a href="#" class="badge badge-pill badge-success" style="width:35px">&lt; 5</a>
                                        }
                                @if (itm.IsGreen(Model.Status) && itm.StatusKapasitet(Model.Status) - Convert.ToInt32(itm.Ombord) > 5)
                                        {
                                <a href="#" class="badge badge-pill badge-success" style="width:35px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a>
                                        }

                                @if (itm.IsUnknown(Model.Status))
                                        {
                                <span class="badge badge-pill badge-light">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
                                        }
                            </td>
                                }
                                else
                                {
                            <td><span class="badge badge-pill badge-light">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></td>
                                }

                            }
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
            </div>
    </div>
            }
            }
