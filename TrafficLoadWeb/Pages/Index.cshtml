@page "{status:TrafficLight=Yellow}/{filterstatus:TrafficLight=Yellow}/{date:DateTime?}/{line?}"
@model IndexModel

@{
    var culture = new System.Globalization.CultureInfo("nb-NO");
    ViewData["Title"] = "Home page";

    var diff = (int)culture.DateTimeFormat.FirstDayOfWeek - (int)Model.Date.DayOfWeek;
    if ((int)Model.Date.DayOfWeek == 0)
        diff = -6;

    DateTime startOfWeek = Model.Date.AddDays(diff);

    List<DateTime> CurrentWeek = Enumerable
        .Range(0, 7)
        .Select(i => startOfWeek
           .AddDays(i)
        ).ToList<DateTime>();

    var parms = new Dictionary<string, string>
            {
                { "Status", Model.Status.ToString() },
                { "FilterStatus", Model.FilterStatus.ToString() },
                { "Line", Model.Line  },
                { "Date", Model.Date.ToString("yyyy-MM-dd") }
            };

    var status = Model.Status.ToString().ToLower();

    var statuses = new Tuple<string, string, Dictionary<string, string>>[]
        {
            Tuple.Create("text-danger", (status.Equals("red")?"Gjeldande " : "Endre til ") + ": Raud", new Dictionary<string, string>(parms)),
            Tuple.Create("text-warning", (status.Equals("yellow")?"Gjeldande " : "Endre til ") + ": Gul", new Dictionary<string, string>(parms)),
            Tuple.Create("text-success", (status.Equals("green")?"Gjeldande " : "Endre til ") + ": Grøn", new Dictionary<string, string>(parms))
        };

    statuses[0].Item3["Status"] = "Red";
    statuses[1].Item3["Status"] = "Yellow";
    statuses[2].Item3["Status"] = "Green";

    var currentStatus = statuses[(status.Equals("red") ? 0 : status.Equals("yellow") ? 1 : 2)];


    <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
        <div class="container">
            <a class="navbar-brand skyss-logo" style="text-indent:-1200px" asp-area="" asp-page="/Index">Skyss COVID-19</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                    aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse">
                <ul class="nav nav-pills flex-grow-1">
                    <li class="nav-item">
                        <a class="nav-link @(Model.FilterStatus.ToString() == "Green"?"active":"")" asp-route-filterstatus="Green" asp-page="Index">Oversikt</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link @(Model.FilterStatus.ToString() == "Yellow"?"active":"")" asp-route-filterstatus="Yellow" asp-page="Index">Avvik</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle @currentStatus.Item1" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">@currentStatus.Item2.Replace("Gjeldande", "Nasjonal status")</a>
                        <div class="dropdown-menu">
                            @foreach (var itm in statuses) {
                            <a class="dropdown-item @itm.Item1" asp-all-route-data="@itm.Item3" asp-page="@ViewContext.RouteData.Values["page"]">@itm.Item2</a>
                                }
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="table-responsive-sm">
        <table class="table table-striped table-sm table-hover">
            <thead>
                <tr>
                    <th scope="col" style="background: #eee; position: sticky; top: 0;">Linje</th>
                    <th scope="col" style="background: #eee; position: sticky; top: 0;">Fra</th>
                    <th scope="col" style="background: #eee; position: sticky; top: 0;">Avgang</th>
                    <th scope="col" style="background: #eee; position: sticky; top: 0;">@Model.Date.ToShortDateString()</th>
                    <th scope="col" style="background: #eee; position: sticky; top: 0;">@Model.Date.AddDays(-1).ToShortDateString()</th>
                    <th scope="col" style="background: #eee; position: sticky; top: 0;">@Model.Date.AddDays(-2).ToShortDateString()</th>
                    <th scope="col" style="background: #eee; position: sticky; top: 0;">@Model.Date.AddDays(-3).ToShortDateString()</th>
                    <th scope="col" style="background: #eee; position: sticky; top: 0;">@Model.Date.AddDays(-4).ToShortDateString()</th>
                    <th scope="col" style="background: #eee; position: sticky; top: 0;">@Model.Date.AddDays(-5).ToShortDateString()</th>
                    <th scope="col" style="background: #eee; position: sticky; top: 0;">@Model.Date.AddDays(-6).ToShortDateString()</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.TurModel)
            {
                var days = new List<TrafficLoadWeb.Models.Tur>();
                days.Add(item);
                days.AddRange(item.History.Cast<TrafficLoadWeb.Models.Tur>());

                <tr>
                    <td>@Html.DisplayFor(modelItem => item.LineName)</td>
                    <td>@Html.DisplayFor(modelItem => item.AvgangsStopp)</td>
                    <td>@Html.Raw(item.AvgangsTid.ToShortTimeString())</td>

                    @for (int i = 0; i > -7; i--)
                    {
                        var itm = days.Where(h => h.AvgangsTid.Date == item.AvgangsTid.Date.AddDays(i)).FirstOrDefault();
                        if (itm != null)
                        {
                <td>
                    @if (itm.IsRed(Model.Status))
                    {
                    <a href="#" class="badge badge-pill badge-danger" style="width:35px" data-toggle="tooltip" data-placement="bottom" title="@itm.FraStopp(Model.Status)">+@Html.Raw(Convert.ToInt32(itm.Ombord) - itm.StatusKapasitet(Model.Status))</a>
                        <span style="float:right;padding-top:3px;padding-left:5px;text-indent:-80px"><span style="display:block;font-size:65%;text-align:center;">@Html.Raw((itm.TilTid(Model.Status) - itm.FraTid(Model.Status)).Value.Minutes)</span><span style="display:block;font-size:45%;text-align:center;">min</span></span>
                    }
                    @if (itm.IsYellow(Model.Status))
                    {
                <a href="#" class="badge badge-pill badge-warning" style="width:35px" data-toggle="tooltip" data-placement="bottom" title="@itm.FraStopp(Model.Status)">+@Html.Raw(Convert.ToInt32(itm.Ombord) - itm.StatusKapasitet(Model.Status))</a>
                    }
                    @if (itm.IsGreen(Model.Status) && itm.StatusKapasitet(Model.Status) - Convert.ToInt32(itm.Ombord) <= 5)
                    {
                        <a href="#" class="badge badge-pill badge-success" style="width:35px">&lt; 5</a>
                    }
                    @if (itm.IsGreen(Model.Status) && itm.StatusKapasitet(Model.Status) - Convert.ToInt32(itm.Ombord) > 5)
                    {
                        <a href="#" class="badge badge-pill badge-success" style="width:35px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</a>
                    }

                    @if (itm.IsUnknown(Model.Status))
                    {
                        <span class="badge badge-pill badge-light">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
                    }
                </td>
                        }
                        else
                        {
                    <td><span class="badge badge-pill badge-light">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></td>
                        }

                    }
                </tr>
            }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="10" style="background: #eee;">
                        <nav aria-label="...">
                            <ul class="pagination justify-content-center">
                                <li class="page-item">
                                    <a asp-page="Index" asp-route-date="@startOfWeek.AddDays(-1).ToString("yyyy-MM-dd")" class="page-link" tabindex="-1">Veke @culture.Calendar.GetWeekOfYear(startOfWeek.AddDays(-1), culture.DateTimeFormat.CalendarWeekRule, culture.DateTimeFormat.FirstDayOfWeek)</a>
                                </li>
                                @foreach (var d in CurrentWeek)
                            {
                                <li class="page-item @Html.Raw(Model.Date.Date.Equals(d.Date) ? "active": "") @Html.Raw(@d.Date > DateTime.Now.AddDays(-1).Date ? "disabled": "")">
                                    <a class="page-link" asp-page="Index" asp-route-date="@d.ToString("yyyy-MM-dd")">@d.ToString("d") <span class="sr-only">@d.ToString("d")</span></a>
                                </li>
                            }
                                <li class="page-item @Html.Raw(@startOfWeek.AddDays(7).Date >= DateTime.Now.Date ? "disabled": "")">
                                    <a asp-page="Index" asp-route-date="@startOfWeek.AddDays(7).ToString("yyyy-MM-dd")" class="page-link" tabindex="-1">Veke @culture.Calendar.GetWeekOfYear(startOfWeek.AddDays(7), culture.DateTimeFormat.CalendarWeekRule, culture.DateTimeFormat.FirstDayOfWeek)</a>
                                </li>
                            </ul>
                        </nav>
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>
}