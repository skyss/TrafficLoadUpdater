@page "/{filterstatus:TrafficLight=Green}/{date:DateTime?}"
@model IndexModel

@{
    var culture = new System.Globalization.CultureInfo("nb-NO");
    ViewData["Title"] = "Home page";

    var diff = (int)culture.DateTimeFormat.FirstDayOfWeek - (int)Model.Date.DayOfWeek;
    if ((int)Model.Date.DayOfWeek == 0)
        diff = -6;

    DateTime startOfWeek = Model.Date.AddDays(diff);

    List<DateTime> CurrentWeek = Enumerable
        .Range(0, 7)
        .Select(i => startOfWeek
           .AddDays(i)
        ).ToList<DateTime>();

    var parms = new Dictionary<string, string>
{
                { "Status", Model.Status.ToString() },
                { "FilterStatus", Model.FilterStatus.ToString() },
                { "Line", Model.Line },
                { "Date", Model.Date.ToString("yyyy-MM-dd") },
                { "DisplayPage", Model.DisplayPage.ToString() },
                { "Size", Model.Size.ToString() },
                { "StopName", Model.StopName },
                { "StopName_text", Model.StopName_text },
                { "TimeSpan", Model.TimeSpan }
            };

    var status = Model.Status.ToString().ToLower();

    var statuses = new Tuple<string, string, Dictionary<string, string>>[]
        {
            Tuple.Create("text-danger", (status.Equals("red")?"Gjeldande " : "Endre til ") + ": Raud", new Dictionary<string, string>(parms)),
            Tuple.Create("text-warning", (status.Equals("yellow")?"Gjeldande " : "Endre til ") + ": Gul", new Dictionary<string, string>(parms)),
            Tuple.Create("text-success", (status.Equals("green")?"Gjeldande " : "Endre til ") + ": Grøn", new Dictionary<string, string>(parms))
                        };

    statuses[0].Item3["Status"] = "Red";
    statuses[1].Item3["Status"] = "Yellow";
    statuses[2].Item3["Status"] = "Green";

    var currentStatus = statuses[(status.Equals("red") ? 0 : status.Equals("yellow") ? 1 : 2)];


    <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white mb-3">
        <a class="navbar-brand skyss-logo" style="text-indent:-1200px" asp-area="" asp-page="/Index">Skyss COVID-19</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse navbar-expand-lg d-sm-inline-flex flex-sm-row-reverse">
            <ul class="navbar-nav mr-auto flex-grow-1 justify-content-end">
                <li class="nav-item">
                    <div class="btn-group my-2 my-lg-0">
                        <a class="dropdown-toggle @currentStatus.Item1" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">@currentStatus.Item2.Replace("Gjeldande", "Nasjonal status")</a>
                        <div class="dropdown-menu dropdown-menu-right">
                            @foreach (var itm in statuses)
                            {
                            <a class="dropdown-item @itm.Item1" asp-all-route-data="@itm.Item3" asp-page="@ViewContext.RouteData.Values["page"]">@itm.Item2</a>
                            }
                        </div>
                    </div>
                </li>
            </ul>
            <ul class="nav nav-tabs mr-auto flex-grow-1">
                <li class="nav-item">
                    <a class="nav-link @(!Model.ShowHelp && Model.FilterStatus.ToString() == "Green"?"active":"")" asp-all-route-data="@(parms.Where(p => !p.Key.ToLower().Equals("filterstatus") && !p.Key.ToLower().Equals("displaypage")).ToDictionary(p => p.Key, p=> p.Value))" asp-route-filterstatus="Green" asp-route-displaypage="1" asp-page="Index">Alle avgangar</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(!Model.ShowHelp && Model.FilterStatus.ToString() == "Yellow"?"active":"")" asp-all-route-data="@(parms.Where(p => !p.Key.ToLower().Equals("filterstatus") && !p.Key.ToLower().Equals("displaypage")).ToDictionary(p => p.Key, p=> p.Value))" asp-route-filterstatus="Yellow" asp-route-displaypage="1" asp-page="Index">Avgangar med avvik</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(Model.ShowHelp?"active":"")" asp-all-route-data="@parms" asp-page="Index" asp-route-showHelp="true">Hjelp</a>
                </li>
                @*<li class="nav-item">
                        <form method="get" class="form-inline" id="filters">
                            <input type="date" class="form-inline" asp-for="Date" id="activeDate" style="margin-left: 10px; margin-top: 5px;" />
                        </form>
                    </li>*@
            </ul>
        </div>
    </nav>
    <div class="row">
        <div class="col">
            <form class="form-inline" method="post" id="stopSelect">
                <div class="input-group mb-2 mr-sm-2">
                    <input type="hidden" name="TimeSpan" id="timespan" value="@Model.TimeSpan">
                    <div id="time-range">
                        <p>
                            Tidspunkt: <span class="slider-time">@Model.TimeSpanFrom.ToShortTimeString()</span> - <span class="slider-time2">@Model.TimeSpanTo.ToShortTimeString()</span>
                        </p>
                        <div class="sliders_step1">
                            <div id="slider-range" data-values="@Model.TimeSpan"></div>
                        </div>
                    </div>
                </div>
                <div class="input-group mb-2 mr-sm-2">
                    <label for="stopName" class="col-form-label">Linje:</label>
                    <input type="text" class="form-control basicAutoComplete" name="line"
                           placeholder="Skriv for å søke..."
                           value="@Model.Line"
                           data-url="@Url.Content("~/js/lines.json")" autocomplete="off">
                </div>
                <div class="input-group mb-2 mr-sm-2">
                    <label for="stopName" class="col-form-label">Haldeplass:</label>
                    <select class="form-control basicAutoComplete" name="stopName"
                            placeholder="Skriv for å søke..."
                            data-default-value="@Model.StopName"
                            data-default-text="@Model.StopName_text"
                            data-url="@Url.Page("index", "search")&l=@Model.Line" autocomplete="off"></select>
                </div>
            </form>
        </div>
    </div>
    @if (Model.ShowHelp)
    {
    <div class="row">
        <div class="col">
            <br/>
            <h3>Hjelp</h3>
            <p>Løysinga gjer deg oversikt over kapasiteten på bussar og Bybanen i området Hordaland. Datagrunnlaget viser tall frå i går og ein veke tilbake i tid. På den måten kan du sjekke når det er sannsynleg at det er mykje folk om bord, og tilpasse reisa di til når det er ledig kapasitet.</p>

            <p>
                Du har desse valga:
                <ul>
                    <li>Vel tidsperiode du vil reise (på mobil må du trykke på området du vil flytte markøren til)</li>
                    <li>Vel mellom alle avgangar eller vis berre dei som har avvik.</li>
                    <li>Vel linjenummer eller haldeplass.</li>
                    <li>Vel smittevernnivå for kollektivtrafikken. Per 21. august er det gult.</li>
                </ul>
            </p>
            <p>Fargetyding i tabellen:</p>
            <dl>
                <dd>
                    <span class="badge badge-pill badge-success">Grøn</span>
                    Ikkje over gjeldande kapasitet
                </dd>
                <dd>
                    <span class="badge badge-pill badge-warning">Gul</span>: Fleire om bord enn gjeldande kapasitet
                </dd>
                <dd>
                    <span class="badge badge-pill badge-danger">Rød</span> 25% over gjeldande kapasitet, eller gult i lengre enn 15 minutt
                </dd>
                <dd><span class="badge badge-pill badge-light">Kvit</span> Data ikkje tilgjengeleg</dd>
            </dl>
            <p>
                Tala i boksane indikerer kor mange fleire passasjerar enn anbefalt det er om bord.
                Antall minutt viser kor lenge det har vore for mange passasjerar om bord
            </p>
            <p>
                Har du tilbakemelding om løysninga, ver venleg å bruk <a href="https://www.skyss.no/kontakt-oss/kontaktskjema/">kontaktskjemaet her.</a>
            </p></div></div>
            }

            @if (!Model.ShowHelp && Model.TurModel != null)
    {
            <div class="row">
                <div class="col">
                    <table class="table table-striped table-sm table-hover table-responsive-sm">
                        <thead>
                            <tr>
                                <th scope="col" style="background: #eee; position: sticky; top: 0;">Linje</th>
                                <th scope="col" style="background: #eee; position: sticky; top: 0;">Retning</th>
                                <th scope="col" style="background: #eee; position: sticky; top: 0;">Avgang</th>
                                <th scope="col" style="background: #eee; position: sticky; top: 0;"><span style="font-size:65%;float:left;">Førre<br/>veke</span></th>
                                <th scope="col" style="background: #eee; position: sticky; top: 0;" class="small">@Model.Date.ToShortDateString().Substring(0, 5)</th>
                                <th scope="col" style="background: #eee; position: sticky; top: 0;" class="small">@Model.Date.AddDays(-1).ToShortDateString().Substring(0, 5)</th>
                                <th scope="col" style="background: #eee; position: sticky; top: 0;" class="small">@Model.Date.AddDays(-2).ToShortDateString().Substring(0, 5)</th>
                                <th scope="col" style="background: #eee; position: sticky; top: 0;" class="small">@Model.Date.AddDays(-3).ToShortDateString().Substring(0, 5)</th>
                                <th scope="col" style="background: #eee; position: sticky; top: 0;" class="small">@Model.Date.AddDays(-4).ToShortDateString().Substring(0, 5)</th>
                                <th scope="col" style="background: #eee; position: sticky; top: 0;" class="small">@Model.Date.AddDays(-5).ToShortDateString().Substring(0, 5)</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.TurModel.Results)
                        {
                            var days = new List<TrafficLoadWeb.Models.Tur>();
                            days.Add(item);
                            days.AddRange(item.History.Cast<TrafficLoadWeb.Models.Tur>());
                            var seq = new int[] {0, 6, 5, 4, 3, 2, 1};

                            <tr>
                                <td class="small">@Html.DisplayFor(modelItem => item.LineName)</td>
                                <td class="small">@Html.DisplayFor(modelItem => item.TilStopp)</td>
                                <td class="small">@Html.Raw(item.AvgangsTid.ToShortTimeString())</td>

                                @foreach (int i in seq)
                                {
                                    var itm = days.Where(h => h.AvgangsTid.Date == item.AvgangsTid.Date.AddDays(i)).FirstOrDefault();

                                    if (itm != null)
                                    {
                            <td>
                                @if (itm.IsRed(Model.Status))
                                {
                                <a href="#" class="badge badge-pill badge-danger" style="width:25px" data-toggle="tooltip" data-placement="bottom" title="@itm.FraStopp(Model.Status)">&nbsp;</a>
                                }
                                @if (itm.IsYellow(Model.Status))
                                {
                            <a href="#" class="badge badge-pill badge-danger" style="width:25px" data-toggle="tooltip" data-placement="bottom" title="@itm.FraStopp(Model.Status)">&nbsp;</a>
                                }
                                @if (itm.IsGreen(Model.Status) && Convert.ToInt32(itm.Ombord) >= itm.StatusKapasitet(Model.Status) * 0.8)
                                {
                            <a href="#" class="badge badge-pill badge-warning" style="width:25px">&nbsp;</a>
                                }
                                @if (itm.IsGreen(Model.Status) && Convert.ToInt32(itm.Ombord) < itm.StatusKapasitet(Model.Status) * 0.8)
                                {
                                    <a href="#" class="badge badge-pill badge-success" style="width:25px">&nbsp;</a>
                                }

                                @if (itm.IsUnknown(Model.Status))
                                {
                                    <span class="badge badge-pill badge-light" style="width:25px">&nbsp;</span>
                                }
                            </td>
                                    }
                                    else
                                    {
                                <td><span class="badge badge-pill badge-light" style="width:25px">&nbsp;</span></td>
                                    }

                                }
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
            @if (Model.TurModel.PageCount > 1)
        {
            var firstPage = 1;
            var lastPage = Model.TurModel.PageCount > 10? 10 : Model.TurModel.PageCount;

            // too many pages?
            if (Model.TurModel.PageCount > 10) {
                if (Model.TurModel.CurrentPage > 4 && Model.TurModel.CurrentPage < (Model.TurModel.PageCount - 4)) {
                    firstPage = Model.TurModel.CurrentPage - 4;
                    lastPage = Model.TurModel.CurrentPage + 4;
                } else if (Model.TurModel.CurrentPage > 4) {
                    firstPage = Model.TurModel.PageCount - 10;
                    lastPage = Model.TurModel.PageCount;
                }
            }

            <div class="row">
                <div class="col align-content-center">
                    <nav aria-label="Navigering kapasitetstabell">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(Model.TurModel.CurrentPage.Equals(1) ? "disabled" : "")">
                                <a class="page-link" aria-label="Forrige" asp-all-route-data="@(parms.Where(p => !p.Key.ToLower().Equals("displaypage")).ToDictionary(p => p.Key, p => p.Value))" asp-route-displaypage="@(Model.TurModel.CurrentPage - 1)" asp-route-showHelp="false">
                                    <span aria-hidden="true">&laquo;</span>
                                    <span class="sr-only">Forrige</span>
                                </a>
                            </li>
                            @if (firstPage > 1)
                        {
                            <li class="page-item"><a class="page-link" asp-all-route-data="@(parms.Where(p => !p.Key.ToLower().Equals("displaypage")).ToDictionary(p => p.Key, p => p.Value))" asp-route-displaypage="1" asp-route-showHelp="false">1</a></li>
                            @if (firstPage > 2)
                            {
                            <li class="page-item disabled"><a class="page-link" href="#">...</a></li>
                            }
                        }
                            @for (var p = firstPage; p <= lastPage; p++)
                        {
                            <li class="page-item @(p.Equals(Model.TurModel.CurrentPage) ? "active" : "")"><a class="page-link" asp-all-route-data="@(parms.Where(p => !p.Key.ToLower().Equals("displaypage")).ToDictionary(p => p.Key, p => p.Value))" asp-route-displaypage="@p" asp-route-showHelp="false">@p</a></li>
                        }
                            @if (lastPage < Model.TurModel.PageCount)
                        {
                            @if (Model.TurModel.PageCount - lastPage > 1)
                            {
                            <li class="page-item disabled"><a class="page-link" href="#">...</a></li>
                            }
                            <li class="page-item"><a class="page-link" asp-all-route-data="@(parms.Where(p => !p.Key.ToLower().Equals("displaypage")).ToDictionary(p => p.Key, p => p.Value))" asp-route-displaypage="@Model.TurModel.PageCount" asp-route-showHelp="false">@Model.TurModel.PageCount</a></li>
                        }
                            <li class="page-item @Model.TurModel.LastRowOnPage.Equals(Model.TurModel.CurrentPage)?" disabled":"">
                                <a class="page-link" aria-label="Neste" asp-all-route-data="@(parms.Where(p => !p.Key.ToLower().Equals("displaypage")).ToDictionary(p => p.Key, p => p.Value))" asp-route-displaypage="@(Model.TurModel.CurrentPage + 1)" asp-route-showHelp="false">
                                    <span aria-hidden="true">&raquo;</span>
                                    <span class="sr-only">Neste</span>
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
            }
        }
            }
